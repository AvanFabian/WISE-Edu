generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Levels represent groups of questions
model Level {
  id        Int        @id @default(autoincrement())
  number    Int        @unique // e.g., Level 1, 2, 3
  status    Boolean    @default(false) // Locked or unlocked
  questions Question[] // Relation to questions
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  Progress Progress[]
}

// Questions belong to a level and have multiple answers
model Question {
  id        Int        @id @default(autoincrement())
  content   String     // The question text
  level     Level      @relation(fields: [levelId], references: [id])
  levelId   Int
  answers   Answer[]   // Relation to answers
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  Progress Progress[]
}

// Answers belong to a question
model Answer {
  id         Int       @id @default(autoincrement())
  content    String    // The answer text
  isCorrect  Boolean   @default(false) // Whether the answer is correct
  question   Question  @relation(fields: [questionId], references: [id])
  questionId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  Progress Progress[]
}

// Track user's progress through the levels and questions
model Progress {
  id          Int       @id @default(autoincrement())
  userId      Int       // User ID
  levelId     Int       // The level associated with this progress
  questionId  Int       @default(0) // The question being tracked
  answerId    Int?      // The selected answer
  isCorrect   Boolean   @default(false) // Whether the answer was correct
  timestamp   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  level       Level     @relation(fields: [levelId], references: [id])
  question    Question? @relation(fields: [questionId], references: [id])
  answer      Answer?   @relation(fields: [answerId], references: [id])
}

// User model
model User {
  id          Int        @id @default(autoincrement())
  name        String?    // User's name
  email       String?    @unique // User's email
  image       String?    // User's profile image
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  progress    Progress[] // Relation to progress
  accounts    Account[]  // Relation to accounts
  sessions    Session[]  // Relation to sessions
}

// NextAuth: Account model
model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @map("refreshToken")
  access_token       String? @map("accessToken")
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

// NextAuth: Session model
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

// NextAuth: Verification Token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
